"use strict";(self.webpackChunkux_ui=self.webpackChunkux_ui||[]).push([[7928],{"./node_modules/css-loader/dist/runtime/api.js":module=>{module.exports=function(cssWithMappingToString){var list=[];return list.toString=function toString(){return this.map((function(item){var content="",needLayer=void 0!==item[5];return item[4]&&(content+="@supports (".concat(item[4],") {")),item[2]&&(content+="@media ".concat(item[2]," {")),needLayer&&(content+="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {")),content+=cssWithMappingToString(item),needLayer&&(content+="}"),item[2]&&(content+="}"),item[4]&&(content+="}"),content})).join("")},list.i=function i(modules,media,dedupe,supports,layer){"string"==typeof modules&&(modules=[[null,modules,void 0]]);var alreadyImportedModules={};if(dedupe)for(var k=0;k<this.length;k++){var id=this[k][0];null!=id&&(alreadyImportedModules[id]=!0)}for(var _k=0;_k<modules.length;_k++){var item=[].concat(modules[_k]);dedupe&&alreadyImportedModules[item[0]]||(void 0!==layer&&(void 0===item[5]||(item[1]="@layer".concat(item[5].length>0?" ".concat(item[5]):""," {").concat(item[1],"}")),item[5]=layer),media&&(item[2]?(item[1]="@media ".concat(item[2]," {").concat(item[1],"}"),item[2]=media):item[2]=media),supports&&(item[4]?(item[1]="@supports (".concat(item[4],") {").concat(item[1],"}"),item[4]=supports):item[4]="".concat(supports)),list.push(item))}},list}},"./node_modules/css-loader/dist/runtime/noSourceMaps.js":module=>{module.exports=function(i){return i[1]}},"./apps/prism/src/lib/atoms/typography-card/typography-card.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{FontWeight:()=>FontWeight,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _typography_card_typography_card_component__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./apps/prism/src/lib/atoms/typography-card/typography-card.component.ts");const __WEBPACK_DEFAULT_EXPORT__={title:"Typography/Typography",component:_typography_card_typography_card_component__WEBPACK_IMPORTED_MODULE_0__.v,argTypes:{size:{options:["xs","sm","md","lg","xl","xxl"],mapping:{xs:"xs",sm:"sm",md:"md",lg:"lg",xl:"xl",xxl:"xxl"},control:"select"}},parameters:{docs:{description:{component:_typography_card_typography_card_component__WEBPACK_IMPORTED_MODULE_0__.v}}}},FontWeight={tags:["isHidden"],render:args=>({props:args,template:'\n            <prism-typography-card [lineHeight]=1.5 [letterSpacing]=1.2>\n                <p [style.font-weight]="400">Roboto / Regular (400)</p>\n                <p [style.font-weight]="700">Roboto / Bold (700)</p>\n                <p [style.font-weight]="800">Roboto / Extra Bold (800)</p>\n                <p [style.font-weight]="900">Roboto / Black (900)</p>\n            </prism-typography-card>\n        '})};FontWeight.parameters={...FontWeight.parameters,docs:{...FontWeight.parameters?.docs,source:{originalSource:'{\n  tags: ["isHidden"],\n  render: args => ({\n    props: args,\n    template: `\n            <prism-typography-card [lineHeight]=1.5 [letterSpacing]=1.2>\n                <p [style.font-weight]="400">Roboto / Regular (400)</p>\n                <p [style.font-weight]="700">Roboto / Bold (700)</p>\n                <p [style.font-weight]="800">Roboto / Extra Bold (800)</p>\n                <p [style.font-weight]="900">Roboto / Black (900)</p>\n            </prism-typography-card>\n        `\n  })\n}',...FontWeight.parameters?.docs?.source}}};const __namedExportsOrder=["FontWeight"]}}]);